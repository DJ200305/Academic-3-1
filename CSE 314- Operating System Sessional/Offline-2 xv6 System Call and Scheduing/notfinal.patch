diff --git a/Makefile b/Makefile
index f8c820e..0613828 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_history\
+	$U/_dummyproc\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -160,7 +163,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..620e68d 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -96,6 +96,7 @@ struct cpu*     mycpu(void);
 struct cpu*     getmycpu(void);
 struct proc*    myproc();
 void            procinit(void);
+void            init_syscall_arrays(void);
 void            scheduler(void) __attribute__((noreturn));
 void            sched(void);
 void            sleep(void*, struct spinlock*);
@@ -106,6 +107,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             history(int number, uint64 addr);
+int             settickets(int tickets);
+int             getpinfo(uint64 addr);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -146,6 +150,7 @@ extern uint     ticks;
 void            trapinit(void);
 void            trapinithart(void);
 extern struct spinlock tickslock;
+extern struct spinlock sys_lock;
 void            usertrapret(void);
 
 // uart.c
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..8f47c62 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -3,6 +3,7 @@
 #include "memlayout.h"
 #include "riscv.h"
 #include "defs.h"
+#include "syscall_stat.h"
 
 volatile static int started = 0;
 
@@ -29,6 +30,7 @@ main()
     fileinit();      // file table
     virtio_disk_init(); // emulated hard disk
     userinit();      // first user process
+    init_syscall_arrays();
     __sync_synchronize();
     started = 1;
   } else {
diff --git a/kernel/param.h b/kernel/param.h
index 80ec6d3..19b74fc 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -12,4 +12,8 @@
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
 #define USERSTACK    1     // user stack pages
-
+#define TIME_LIMIT_1 1
+#define TIME_LIMIT_2 2
+#define BOOST_INTERVAL 64
+#define DEFAULT_TICKET_COUNT 10
+#define PRINT_SCHEDULING 1
diff --git a/kernel/proc.c b/kernel/proc.c
index 130d9ce..7019e7b 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,9 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "syscall_stat.h"
+#include "syscall.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -12,6 +15,12 @@ struct proc proc[NPROC];
 
 struct proc *initproc;
 
+struct pstat stats;
+
+struct syscall_stat syscall_stats[NUM_SYSCALLS+1];
+
+static int seed = 42;
+
 int nextpid = 1;
 struct spinlock pid_lock;
 
@@ -125,6 +134,14 @@ found:
   p->pid = allocpid();
   p->state = USED;
 
+  p->level = 1;
+  p->org_tickets = DEFAULT_TICKET_COUNT;
+  p->curr_tickets = DEFAULT_TICKET_COUNT;
+  //printf("Process %d allocated with %d tickets\n", p->pid, p->curr_tickets);
+  p->tot_time = 0;
+  p->curr_time = 0;
+
+
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
@@ -287,6 +304,9 @@ fork(void)
   if((np = allocproc()) == 0){
     return -1;
   }
+  
+  np->org_tickets = p->org_tickets;
+  np->curr_tickets = p->org_tickets;
 
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
@@ -434,6 +454,55 @@ wait(uint64 addr)
   }
 }
 
+uint64
+xorshift(void)
+{
+  uint64 x = seed;
+  x ^= (x << 13);
+  x ^= (x >> 7);
+  x ^= (x << 17);
+  seed = x;
+  return x;
+}
+
+uint64
+range(int max)
+{
+  return 1 + (xorshift() % max);
+}
+
+void 
+refill(void)
+{
+  int cnt = 0;
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    cnt += p->curr_tickets;
+    release(&p->lock);
+  }
+  if(cnt == 0){
+    for(p=proc;p<&proc[NPROC];p++){
+      acquire(&p->lock);
+      p->curr_tickets = p->org_tickets;
+      release(&p->lock);
+    }
+  }
+}
+
+void 
+boosting(void)
+{
+  struct proc *p;
+  
+    for(p=proc;p<&proc[NPROC];p++){
+      acquire(&p->lock);
+      p->level = 1;
+      release(&p->lock);
+    }
+  
+}
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -446,7 +515,6 @@ scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
-
   c->proc = 0;
   for(;;){
     // The most recent process to run may have had interrupts
@@ -454,14 +522,87 @@ scheduler(void)
     // processes are waiting.
     intr_on();
 
+    while(1){
+      acquire(&tickslock);
+      ticks++;
+      if(ticks % BOOST_INTERVAL == 0){
+        //printf("Boosting processes\n");
+        boosting();
+      }
+      
+      release(&tickslock);
+      refill();
+      int prefix_sum[NPROC] = {0};
+      int valid_process[NPROC] = {0};
+      int ok = 0,sum = 0;
+      for(int i=0;i<NPROC;i++){
+        p = &proc[i];
+        acquire(&p->lock);
+        if(p->state == RUNNABLE && p->level == 1 && p->curr_tickets > 0){
+          valid_process[ok] = i;
+          prefix_sum[ok] = sum + p->curr_tickets;
+          sum += p->curr_tickets;
+          ok += 1;
+        }
+        release(&p->lock);
+      }
+      if(ok == 0){
+        break;
+      }
+      
+      int winner = range(sum );
+      int win_index = -1;
+      int sum1 = 0;
+      for(int i=0;i<ok;i++){
+        if(winner > sum1 && winner <= prefix_sum[i]){
+          win_index = valid_process[i];
+          break;
+        }
+        else{
+          sum1 = prefix_sum[i];
+        }
+      }
+      //printf("winner: %d\n", winner);
+      struct proc* p = &proc[win_index];
+      //printf("Process %d running on CPU %d", p->pid);
+      //printf("Winner: %d\n",winner);
+      //printf("Process %d selected with %d tickets, win index: %d\n", p->pid, p->curr_tickets,win_index);
+      acquire(&p->lock);
+      if(p->level == 1 && p->state == RUNNABLE){
+        p->curr_tickets--;
+        while(p->state == RUNNABLE && p->curr_time < TIME_LIMIT_1){
+          // Switch to chosen process.  It is the process's job
+          // to release its lock and then reacquire it
+          // before jumping back to us.
+          p->state = RUNNING;
+          p->curr_time++;
+          p->tot_time++;
+          c->proc = p;
+          swtch(&c->context, &p->context);
+
+          // Process is done running for now.
+          // It should have changed its p->state before coming back.
+          c->proc = 0;
+        }
+        if(p->curr_time == TIME_LIMIT_1){
+          p->level = 2;
+        }
+        p->curr_time = 0;
+      }
+      release(&p->lock);
+    }
+
     int found = 0;
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
+      if(p->level == 2 && p->state == RUNNABLE) {
+        while(p->state == RUNNABLE && p->curr_time < TIME_LIMIT_2){
+          // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
         p->state = RUNNING;
+        p->curr_time++;
+        p->tot_time++;
         c->proc = p;
         swtch(&c->context, &p->context);
 
@@ -469,6 +610,11 @@ scheduler(void)
         // It should have changed its p->state before coming back.
         c->proc = 0;
         found = 1;
+        }
+        if(p->curr_time < TIME_LIMIT_2){
+        p->level = 1;
+      }
+      p->curr_time = 0;
       }
       release(&p->lock);
     }
@@ -693,3 +839,85 @@ procdump(void)
     printf("\n");
   }
 }
+
+void
+init_syscall_arrays(void){
+  strncpy(syscall_stats[SYS_fork].syscall_name, "fork", 16);
+  strncpy(syscall_stats[SYS_exit].syscall_name, "exit", 16);
+  strncpy(syscall_stats[SYS_wait].syscall_name, "wait", 16);
+  strncpy(syscall_stats[SYS_pipe].syscall_name, "pipe", 16);
+  strncpy(syscall_stats[SYS_read].syscall_name, "read", 16);
+  strncpy(syscall_stats[SYS_kill].syscall_name, "kill", 16);
+  strncpy(syscall_stats[SYS_exec].syscall_name, "exec", 16);
+  strncpy(syscall_stats[SYS_fstat].syscall_name, "fstat", 16);
+  strncpy(syscall_stats[SYS_chdir].syscall_name, "chdir", 16);
+  strncpy(syscall_stats[SYS_dup].syscall_name, "dup", 16);
+  strncpy(syscall_stats[SYS_getpid].syscall_name, "getpid", 16);
+  strncpy(syscall_stats[SYS_sbrk].syscall_name, "sbrk", 16);
+  strncpy(syscall_stats[SYS_sleep].syscall_name, "sleep", 16);
+  strncpy(syscall_stats[SYS_uptime].syscall_name, "uptime", 16);
+  strncpy(syscall_stats[SYS_open].syscall_name, "open", 16);
+  strncpy(syscall_stats[SYS_write].syscall_name, "write", 16);
+  strncpy(syscall_stats[SYS_mknod].syscall_name, "mknod", 16);
+  strncpy(syscall_stats[SYS_unlink].syscall_name, "unlink", 16);
+  strncpy(syscall_stats[SYS_link].syscall_name, "link", 16);
+  strncpy(syscall_stats[SYS_mkdir].syscall_name, "mkdir", 16);
+  strncpy(syscall_stats[SYS_close].syscall_name, "close", 16);
+  strncpy(syscall_stats[SYS_history].syscall_name, "history", 16);
+  for(int i = 1; i <= NUM_SYSCALLS; i++){
+    syscall_stats[i].count = 0;
+    syscall_stats[i].accum_time = 0;
+  }
+}
+
+int
+history(int number, uint64 addr)
+{
+  struct proc *p = myproc();
+  for(int i=1;i<=NUM_SYSCALLS;i++){
+    if(copyout(p->pagetable, addr + (i) * sizeof(struct syscall_stat),
+              (char *)&syscall_stats[i], sizeof(struct syscall_stat)) < 0) {
+      return -1;
+    }
+  }
+  return 0;
+}
+int 
+settickets(int tickets)
+{
+  struct proc *p = myproc();
+  if(tickets < 1){
+    //acquire(&p->lock);
+    p->org_tickets = DEFAULT_TICKET_COUNT;
+    p->curr_tickets = DEFAULT_TICKET_COUNT;
+    //release(&p->lock);
+    return -1;
+  }
+  else{
+    //acquire(&p->lock);
+     p->org_tickets = tickets;
+    p->curr_tickets = tickets;
+    //release(&p->lock);
+  }
+  //release(&p->lock);
+  return 0;
+}
+int 
+getpinfo(uint64 addr)
+{
+  struct proc* p;
+  for(p=proc;p<&proc[NPROC];p++){
+    acquire(&p->lock);
+    stats.pid[p - proc] = p->pid;
+    stats.inuse[p - proc] = (p->state == UNUSED) ? 0 : 1;
+    stats.inQ[p - proc] = p->level;
+    stats.tickets_original[p - proc] = p->org_tickets;
+    stats.tickets_current[p - proc] = p->curr_tickets;
+    stats.time_slices[p - proc] = p->tot_time;
+    release(&p->lock);
+  }
+  if(copyout(myproc()->pagetable, addr, (char *)&stats, sizeof(stats)) < 0) {
+    return -1;
+  }
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..77026ef 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int org_tickets;
+  int curr_tickets;
+  int level;
+  int tot_time;
+  int curr_time;
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..45d373f
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,13 @@
+ #ifndef _PSTAT_H_
+  #define _PSTAT_H_
+  #include "param.h"
+  struct pstat {
+  int pid[NPROC]; // the process ID of each process
+  int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+ int inQ[NPROC]; // which queue the process is currently in
+  int tickets_original[NPROC]; // the number of tickets each process originally had
+ int tickets_current[NPROC]; // the number of tickets each process currently has
+  int time_slices[NPROC]; // the number of time slices each process has been
+ 
+  };
+ #endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..9de3eac 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -6,6 +6,7 @@
 #include "proc.h"
 #include "syscall.h"
 #include "defs.h"
+#include "syscall_stat.h"
 
 // Fetch the uint64 at addr from the current process.
 int
@@ -101,6 +102,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_history(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,19 +130,36 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_history] sys_history,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
 };
 
+
+
 void
 syscall(void)
 {
   int num;
   struct proc *p = myproc();
-
+  int first,last;
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
+    acquire(&tickslock);
+    first = ticks;
+    release(&tickslock);
     p->trapframe->a0 = syscalls[num]();
+    acquire(&tickslock);
+    last = ticks;
+    release(&tickslock);
+
+    acquire(&sys_lock);
+    syscall_stats[num].count++;
+    syscall_stats[num].accum_time += (last - first);
+    release(&sys_lock);
+
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..809745f 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_history 22
+#define SYS_settickets 23
+#define SYS_getpinfo 24
\ No newline at end of file
diff --git a/kernel/syscall_stat.h b/kernel/syscall_stat.h
new file mode 100644
index 0000000..22d507d
--- /dev/null
+++ b/kernel/syscall_stat.h
@@ -0,0 +1,8 @@
+#define  NUM_SYSCALLS 22
+struct syscall_stat{
+    char syscall_name[16]; // Name of the syscall
+    int count;
+    int accum_time;
+};
+
+extern struct syscall_stat syscall_stats[NUM_SYSCALLS+1];
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..8fb2acf 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,30 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+uint64
+sys_history(void)
+{
+  int number;
+  uint64 addr;
+
+  argint(0, &number);
+  argaddr(1, &addr);
+  return history(number, addr);
+}
+uint64
+sys_settickets(void)
+{
+  int tickets;
+
+  argint(0, &tickets);
+  if(tickets < 1)
+    return -1;
+  return settickets(tickets);
+}
+uint64
+sys_getpinfo(void)
+{
+  uint64 addr;
+  argaddr(0, &addr);
+  return getpinfo(addr);
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index d454a7d..d80876b 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -7,10 +7,14 @@
 #include "defs.h"
 
 struct spinlock tickslock;
+struct spinlock sys_lock;
 uint ticks;
 
 extern char trampoline[], uservec[], userret[];
 
+extern void boosting(void);
+extern void refill(void);
+
 // in kernelvec.S, calls kerneltrap().
 void kernelvec();
 
@@ -20,6 +24,7 @@ void
 trapinit(void)
 {
   initlock(&tickslock, "time");
+  initlock(&sys_lock, "syscall_lock");
 }
 
 // set up to take exceptions and traps while in the kernel.
@@ -169,6 +174,7 @@ clockintr()
     wakeup(&ticks);
     release(&tickslock);
   }
+  
 
   // ask for the next timer interrupt. this also clears
   // the interrupt request. 1000000 is about a tenth
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..d1c40ea
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,35 @@
+#include "kernel/types.h"
+#include "kernel/param.h"
+#include "kernel/pstat.h"
+#include "user/user.h"
+int main(int argc,char *argv[])
+{
+    if(argc < 1){
+        printf("Usage: dummyproc <tickets>\n");
+        exit(1);
+    }
+    if(argc == 1){
+        int done = settickets(-1);
+        if(done < 0){
+        printf("Default tickets are set\n");
+    }
+        return 0;
+    }
+    int tickets = atoi(argv[1]);
+    int done = settickets(tickets);
+    if(done < 0){
+        printf("Error in settickets syscall\n");
+        exit(1);
+    }
+    long long int dummy = 10000000000;
+    
+    for(int i=0;i<4;i++){
+       fork();
+       long long int a = 0;
+       while(dummy--){
+          a++;
+       }
+    }
+    exit(0);
+    
+}
\ No newline at end of file
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..92588a1
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,32 @@
+#include "kernel/types.h"
+#include "kernel/param.h"
+#include "kernel/syscall_stat.h"
+#include "user/user.h"
+int main(int argc, char* argv[])
+{
+    struct syscall_stat usysstats[NUM_SYSCALLS + 1];
+    if(argc != 2){
+        int done = history(-1, (uint64)usysstats);
+        if(done == 0){
+            for(int i=1;i<=NUM_SYSCALLS;i++){
+            printf("%d: syscall:%s, #:%d, time:%d\n",i, usysstats[i].syscall_name, usysstats[i].count, usysstats[i].accum_time);
+        }
+        }
+        else{
+            printf("Error in history syscall\n");
+            exit(1);
+        }
+    }
+    else{
+        int number = atoi(argv[1]);
+        int done = history(number, (uint64)usysstats);
+        if(done == 0){
+            printf("%d: syscall:%s, #:%d, time:%d\n",number, usysstats[number].syscall_name, usysstats[number].count, usysstats[number].accum_time);
+        }
+        else{
+            printf("Error in history syscall\n");
+            exit(1);
+        }
+    }
+    return 0;
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..31dd291
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,23 @@
+#include "kernel/types.h"
+#include "kernel/param.h"
+#include "kernel/pstat.h"
+#include "user/user.h"
+int main(int argc,char *argv[])
+{
+    struct pstat usysstats;
+    int done = getpinfo((uint64)&usysstats);
+    if(done < 0){
+        printf("Error in getpinfo syscall\n");
+        exit(1);
+    }
+    printf("PID  | In Use | inQ  | Original Tickets | Current Tickets |  Time Slices \n");
+    for(int i=0;i<NPROC;i++){
+        if(usysstats.pid[i] != 0){
+            printf("%d       %d         %d       %d                  %d                  %d            \n",
+               usysstats.pid[i], usysstats.inuse[i], usysstats.inQ[i],
+               usysstats.tickets_original[i], usysstats.tickets_current[i],
+               usysstats.time_slices[i]);
+        }
+    }
+    return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index f16fe27..88d614f 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int history(int number, uint64 addr);
+int settickets(int tickets);
+int getpinfo(uint64 addr);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..397fec1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("history");
+entry("settickets");
+entry("getpinfo");
\ No newline at end of file
